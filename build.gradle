plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'java'
    id 'java-gradle-plugin'
    id 'io.quarkus'
    id "io.swagger.core.v3.swagger-gradle-plugin" version "2.2.0"
    id 'checkstyle'
    id 'pmd'
    // id 'findbugs' --deprecated
    // id 'com.github.spotbugs.gradle-plugin'
    id 'org.sonarqube' version '3.3'
    id 'com.github.spotbugs' version '5.0.6'
}

group 'com.neomacro'
version '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        // exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        // exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springCloudVersion', "2021.0.1")
    spotBugsVersion = '4.6.0'
    // slf4jVersion = '1.8.0-beta4'
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.springframework.boot:spring-boot-starter-security'
    compileOnly 'org.projectlombok:lombok'
    compileOnly "com.github.spotbugs:spotbugs:${spotBugsVersion}"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework:spring-orm'
    // implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-container-image-docker'
    implementation 'io.quarkus:quarkus-kubernetes'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-cache'
    implementation "org.springframework.boot:spring-boot-starter-log4j2"
    modules {
        module("org.springframework.boot:spring-boot-starter-logging") {
            replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
        }
    }
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation(enforcedPlatform("org.junit:junit-bom:5.4.0")) // JUnit 5 BOM
    testImplementation("org.junit.jupiter:junit-jupiter")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

apply plugin: "io.swagger.core.v3.swagger-gradle-plugin"

spotbugs {
    ignoreFailures = true
}
spotbugsMain {
    reports {
        sarif {
            required = true
        }
    }
}